services:
#  kafka:
#    image: bitnami/kafka:latest
#    container_name: cybernet_kafka
#    ports:
#      - "${KAFKA_PORT}:${KAFKA_PORT}"
#    environment:
#      - KAFKA_CFG_PROCESS_ROLES=broker,controller
#      - KAFKA_CFG_NODE_ID=${KAFKA_CFG_NODE_ID}
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CFG_NODE_ID}@localhost:${KAFKA_CTRL_PORT}
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:${KAFKA_PORT},CONTROLLER://0.0.0.0:${KAFKA_CTRL_PORT}
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:${KAFKA_PORT}
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
#      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID}
#    volumes:
#      - kafka_data:/bitnami/kafka

  postgres:
    image: postgres:latest
    container_name: cybernet_postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: cybernet_redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"

volumes:
  kafka_data: {}
  postgres_data: {}

# docker compose up -d
